{"version":3,"sources":["ng://eu-loader/lib/eu-popup-insertion.directive.ts","ng://eu-loader/lib/dialog-ref.ts","ng://eu-loader/lib/dialog-config.ts","ng://eu-loader/lib/eu-loader.component.ts","ng://eu-loader/lib/dialog-injector.ts","ng://eu-loader/lib/loader/loader.component.ts","ng://eu-loader/lib/eu-loader.service.ts","ng://eu-loader/lib/eu-loader.module.ts"],"names":["EuPopupInsertionDirective","viewContainerRef","this","Directive","args","selector","ViewContainerRef","DialogRef","Subject","_afterClosed","asObservable","prototype","close","result","next","DialogConfig","EuLoaderComponent","componentFactoryResolver","cd","dialogRef","dialogConfig","_onClose","ngOnInit","ngAfterViewInit","loadChildComponent","childComponentType","detectChanges","ngOnDestroy","componentRef","destroy","onOverlayClicked","evt","dismissOnClickOutside","undefined","onDialogClicked","stopPropagation","componentType","componentFactory","resolveComponentFactory","insertionPoint","clear","createComponent","Component","template","ComponentFactoryResolver","ChangeDetectorRef","ViewChild","read","DialogInjector","_parentInjector","_additionalTokens","get","token","notFoundValue","flags","value","LoaderComponent","config","dialog","onCancel","onOk","EuLoaderService","appRef","injector","open","loaderRef","appendDialogComponentToBody","dialogComponentRef","instance","removeLoaderComponentFromBody","map","WeakMap","set","sub","afterClosed","subscribe","_this","unsubscribe","create","attachView","hostView","domElem","rootNodes","document","body","appendChild","onClose","detachView","Injectable","providedIn","ApplicationRef","Injector","EuLoaderModule","NgModule","declarations","imports","CommonModule","BrowserModule","exports","entryComponents"],"mappings":"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","sourcesContent":["import {Directive, ViewContainerRef} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[euPopupInsertion]',\r\n})\r\nexport class EuPopupInsertionDirective {\r\n  constructor(public viewContainerRef: ViewContainerRef) {\r\n  }\r\n}\r\n","import {Observable, Subject} from 'rxjs';\r\n\r\nexport class DialogRef {\r\n  constructor() {\r\n  }\r\n\r\n  private readonly _afterClosed = new Subject<any>();\r\n  afterClosed: Observable<any> = this._afterClosed.asObservable();\r\n\r\n  close(result?: any) {\r\n    this._afterClosed.next(result); \r\n  }\r\n}\r\n","export class DialogConfig {\r\n  type?: string;\r\n  text?: string;\r\n  dismissOnClickOutside?= true;\r\n  spinnerColor?= '#222222dc';\r\n  textColor?= '#222222dc';\r\n}\r\n","import {\n  Component,\n  Type,\n  OnDestroy,\n  AfterViewInit,\n  OnInit,\n  ComponentRef,\n  ViewChild,\n  ComponentFactoryResolver,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { EuPopupInsertionDirective } from './eu-popup-insertion.directive';\nimport { DialogRef } from './dialog-ref';\nimport { DialogConfig } from './dialog-config';\n\n@Component({\n  selector: 'lib-eu-popup',\n  templateUrl: './eu-popup.component.html',\n  styleUrls: ['./eu-popup.component.scss']\n})\nexport class EuLoaderComponent implements OnInit, AfterViewInit, OnDestroy {\n  private readonly _onClose = new Subject<any>();\n\n  public componentRef: ComponentRef<any>;\n  public childComponentType: Type<any>;\n  public onClose = this._onClose.asObservable();\n\n  @ViewChild(EuPopupInsertionDirective, { read: false }) insertionPoint: EuPopupInsertionDirective;\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private cd: ChangeDetectorRef,\n    private dialogRef: DialogRef,\n    private dialogConfig: DialogConfig,\n  ) {\n  }\n\n  ngOnInit() {\n  }\n\n  ngAfterViewInit() {\n    this.loadChildComponent(this.childComponentType);\n    this.cd.detectChanges();\n  }\n\n  ngOnDestroy() {\n    if (this.componentRef) {\n      this.componentRef.destroy();\n    }\n  }\n\n  onOverlayClicked(evt: MouseEvent) {\n    if (this.dialogConfig.dismissOnClickOutside || this.dialogConfig.dismissOnClickOutside == undefined) {\n      this.dialogRef.close();\n    }\n  }\n\n  onDialogClicked(evt: MouseEvent) {\n    evt.stopPropagation();\n  }\n\n  loadChildComponent(componentType: Type<any>) {\n    let componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n\n    let viewContainerRef = this.insertionPoint.viewContainerRef;\n    viewContainerRef.clear();\n\n    this.componentRef = viewContainerRef.createComponent(componentFactory);\n  }\n}\n","import { Injector, Type, InjectionToken, InjectFlags } from '@angular/core'\r\n\r\nexport class DialogInjector implements Injector {\r\n  constructor(\r\n    private _parentInjector: Injector,\r\n    private _additionalTokens: WeakMap<any, any>\r\n  ) {}\r\n\r\n  get<T>(\r\n    token: Type<T> | InjectionToken<T>,\r\n    notFoundValue?: T,\r\n    flags?: InjectFlags\r\n  ): T\r\n  get(token: any, notFoundValue?: any)\r\n  get(token: any, notFoundValue?: any, flags?: any) {\r\n    const value = this._additionalTokens.get(token)\r\n\r\n    if (value) return value\r\n\r\n    return this._parentInjector.get<any>(token, notFoundValue)\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { DialogRef } from '../dialog-ref';\r\nimport { DialogConfig } from '../dialog-config';\r\n\r\n@Component({\r\n  selector: 'lib-eu-loader',\r\n  templateUrl: './loader.component.html',\r\n  styleUrls: ['./loader.component.scss']\r\n})\r\nexport class LoaderComponent implements OnInit {\r\n  constructor(public config: DialogConfig, public dialog: DialogRef) {\r\n  }\r\n\r\n  onCancel() {\r\n    this.dialog.close(false);\r\n  }\r\n\r\n  onOk() {\r\n    this.dialog.close(true);\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n","import {\n  Injectable,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  EmbeddedViewRef,\n  ComponentRef, Type,\n} from '@angular/core';\nimport { EuLoaderComponent } from './eu-loader.component';\nimport { DialogConfig } from './dialog-config';\nimport { DialogInjector } from './dialog-injector';\nimport { DialogRef } from './dialog-ref';\nimport { LoaderComponent } from './loader/loader.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EuLoaderService {\n\n  dialogComponentRef: ComponentRef<EuLoaderComponent>;\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    private injector: Injector\n  ) {\n  }\n\n\n  public open(config: DialogConfig) {\n    const loaderRef = this.appendDialogComponentToBody(config);\n    this.dialogComponentRef.instance.childComponentType = LoaderComponent;\n    return loaderRef;\n  }\n\n\n  public close() {\n    this.removeLoaderComponentFromBody();\n  }\n\n  private appendDialogComponentToBody(config: DialogConfig) {\n    const map = new WeakMap();\n    map.set(DialogConfig, config);\n\n    // add the DialogRef to dependency injection\n    const dialogRef = new DialogRef();\n    map.set(DialogRef, dialogRef);\n\n    // we want to know when somebody called the close mehtod\n    const sub = dialogRef.afterClosed.subscribe(() => {\n      // close the dialog\n      this.removeLoaderComponentFromBody();\n      sub.unsubscribe();\n    });\n\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(EuLoaderComponent);\n    const componentRef = componentFactory.create(new DialogInjector(this.injector, map));\n\n    this.appRef.attachView(componentRef.hostView);\n\n    const domElem = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    document.body.appendChild(domElem);\n\n    this.dialogComponentRef = componentRef;\n\n    this.dialogComponentRef.instance.onClose.subscribe(() => {\n      this.removeLoaderComponentFromBody();\n    });\n\n    // return the dialogRef\n    return dialogRef;\n  }\n\n  private removeLoaderComponentFromBody() {\n    this.appRef.detachView(this.dialogComponentRef.hostView);\n    this.dialogComponentRef.destroy();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { EuLoaderComponent } from './eu-loader.component';\nimport { EuPopupInsertionDirective } from './eu-popup-insertion.directive';\nimport { LoaderComponent } from './loader/loader.component';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\n\n@NgModule({\n  declarations: [\n    EuLoaderComponent,\n    EuPopupInsertionDirective,\n    LoaderComponent\n  ],\n  imports: [\n    CommonModule,\n    BrowserModule\n  ],\n  exports: [\n    EuLoaderComponent,\n    EuPopupInsertionDirective,\n    LoaderComponent\n  ],\n  entryComponents: [\n    EuLoaderComponent,\n    LoaderComponent\n  ],\n})\nexport class EuLoaderModule {\n}\n"]}